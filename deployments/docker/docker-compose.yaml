version: '3.8'

services:
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - microservices

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - microservices

  # Payment Service
  payment-service:
    build:
      context: ../..
      dockerfile: Dockerfile.payment-service
    ports:
      - "50053:50053"
      - "8082:8082"
    environment:
      - PORT=50053
      - METRICS_PORT=8082
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - jaeger
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: ../..
      dockerfile: Dockerfile.inventory-service
    ports:
      - "50052:50052"
      - "8081:8081"
    environment:
      - PORT=50052
      - METRICS_PORT=8081
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - jaeger
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ../..
      dockerfile: Dockerfile.order-service
    ports:
      - "50051:50051"
      - "8080:8080"
    environment:
      - PORT=50051
      - METRICS_PORT=8080
      - INVENTORY_SERVICE_ADDR=inventory-service:50052
      - PAYMENT_SERVICE_ADDR=payment-service:50053
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    depends_on:
      - inventory-service
      - payment-service
      - jaeger
    networks:
      - microservices
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  microservices:
    driver: bridge

volumes:
  grafana-storage:

